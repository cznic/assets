// Copyright 2017 The Assets Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Command assets compiles a directory content to a Go file.
//
//	Usage of assets:
//	  -d string
//	    	input directory (default "assets")
//	  -dotfiles
//	    	include files starting with .
//	  -map string
//	    	name of the map containing the assets (default "assets")
//	  -o string
//	    	output file name (default "assets.go")
//	  -package string
//	    	output package name (default "main")
package main

import (
	"bufio"
	"flag"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strings"
)

func main() {
	log.SetFlags(log.Lshortfile)

	oD := flag.String("d", "assets", "input directory")
	oDotFiles := flag.Bool("dotfiles", false, "include files starting with .")
	oName := flag.String("map", "assets", "name of the map containing the assets")
	oO := flag.String("o", "assets.go", "output file name")
	oPackage := flag.String("package", "main", "output package name")
	flag.Parse()

	f, err := os.Create(*oO)
	if err != nil {
		log.Fatal(err)
	}

	defer f.Close()

	if err := os.Chdir(*oD); err != nil {
		log.Fatal(err)
	}

	out := bufio.NewWriter(f)

	defer func() {
		if err := out.Flush(); err != nil {
			log.Fatal(err)
		}
	}()

	w := func(s string, arg ...interface{}) {
		if _, err := fmt.Fprintf(out, s, arg...); err != nil {
			log.Fatal(err)
		}
	}

	w(`// Code generated by assets compiler. DO NOT EDIT.
	
package %s

var (
	%s = map[string]string{
`, *oPackage, *oName)

	if err := filepath.Walk(".", func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}

		if info.IsDir() {
			return nil
		}

		b, err := ioutil.ReadFile(path)
		if err != nil {
			return nil
		}

		if !*oDotFiles && strings.HasPrefix(filepath.Base(path), ".") {
			return nil
		}

		w("%q: %q,\n", "/"+filepath.ToSlash(path), b)
		return nil
	}); err != nil {
		log.Fatal(err)
	}

	w("}\n)")
}
